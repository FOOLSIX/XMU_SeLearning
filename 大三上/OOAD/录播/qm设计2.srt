1
00:00:18,066 --> 00:00:18,866
好

2
00:00:19,266 --> 00:00:22,866
这个动态建模和静态建模是并行

3
00:00:24,300 --> 00:00:27,700
动态建模是我们在整个设计过程中间

4
00:00:27,700 --> 00:00:31,266
其实会花更多时间去做的东西

5
00:00:31,333 --> 00:00:33,499
我们通常的过程是

6
00:00:33,600 --> 00:00:37,800
先会有一个初步的静态建模的类图

7
00:00:37,900 --> 00:00:39,766
这个是由领域模型过来的

8
00:00:39,866 --> 00:00:40,199
然后

9
00:00:40,200 --> 00:00:45,166
我们会把从呃前端过来的每一个API

10
00:00:45,366 --> 00:00:47,966
在控制器层一个一个的去实现

11
00:00:47,966 --> 00:00:49,366
因为控制器层的实现

12
00:00:49,366 --> 00:00:51,866
就是针对我们设计的API

13
00:00:51,933 --> 00:00:53,566
一个一个的去做

14
00:00:54,133 --> 00:00:55,266
做的过程中间

15
00:00:55,266 --> 00:01:00,299
这些控制器层要去掉服务层的方法

16
00:01:00,400 --> 00:01:02,400
这些方法怎么去做

17
00:01:02,600 --> 00:01:04,533
就会用我们的动态模型

18
00:01:04,533 --> 00:01:06,766
一个一个的去把它完成啊

19
00:01:06,766 --> 00:01:07,966
一个个的去把它完成

20
00:01:08,266 --> 00:01:10,799
所以它是我们整个设计的细节

21
00:01:11,133 --> 00:01:12,199
逻辑的细节

22
00:01:12,533 --> 00:01:15,533
也是我们称之为Rob his road

23
00:01:15,700 --> 00:01:19,333
真正是去做面向对象设计的

24
00:01:19,333 --> 00:01:20,366
血肉的过程

25
00:01:20,366 --> 00:01:21,966
我们的冲血模型

26
00:01:22,066 --> 00:01:24,699
就是靠对象动态建模啊

27
00:01:24,700 --> 00:01:25,700
把它做出来

28
00:01:26,766 --> 00:01:28,733
那动态建模中间

29
00:01:28,733 --> 00:01:31,566
最主要用来描述的工具

30
00:01:31,566 --> 00:01:33,333
是我们的交互图

31
00:01:34,733 --> 00:01:35,999
交互图啊

32
00:01:36,000 --> 00:01:39,500
在YouTube中间其实是分为两种图的

33
00:01:39,500 --> 00:01:40,900
一个叫做顺序图

34
00:01:40,900 --> 00:01:42,066
secrets diagram

35
00:01:42,333 --> 00:01:44,999
另外一种图叫做通讯图啊

36
00:01:45,000 --> 00:01:46,200
有人叫做沟通图

37
00:01:46,200 --> 00:01:48,300
communication diagram啊

38
00:01:48,300 --> 00:01:49,733
这个可能方法不同

39
00:01:50,666 --> 00:01:53,599
那这两种图有什么样的差别

40
00:01:53,900 --> 00:01:58,333
我们用这两种图分别描述

41
00:01:58,333 --> 00:02:00,766
我们之前2023年写的

42
00:02:00,766 --> 00:02:02,933
这个取消团购的

43
00:02:02,933 --> 00:02:05,466
这个业务的设计是怎么做的啊

44
00:02:05,800 --> 00:02:06,900
那为了让大家知道

45
00:02:06,900 --> 00:02:08,533
他跟代码之间的关系

46
00:02:08,533 --> 00:02:10,899
所以我把图和代码放在一起了

47
00:02:11,200 --> 00:02:12,766
那通常来说

48
00:02:12,766 --> 00:02:15,766
我们是会先画图再写代码

49
00:02:16,100 --> 00:02:19,066
但也有可能是先写代码再画图

50
00:02:19,100 --> 00:02:21,000
因为你为了让这个代码

51
00:02:21,366 --> 00:02:22,499
就是我们可以看到

52
00:02:22,500 --> 00:02:23,600
给大家看代码的时候

53
00:02:23,600 --> 00:02:25,500
是一堆的代码

54
00:02:25,600 --> 00:02:27,566
然后你不知道这些代码之间的关系

55
00:02:27,566 --> 00:02:29,099
应该从何往哪看

56
00:02:29,500 --> 00:02:31,533
看图会更加的清楚一点啊

57
00:02:31,533 --> 00:02:34,499
所以无论是在涉及前还是在实现后

58
00:02:35,266 --> 00:02:36,699
图都是有必要画的

59
00:02:37,133 --> 00:02:40,533
我们在这里看到的就是一张顺序图啊

60
00:02:40,533 --> 00:02:41,899
那顺序图描述的

61
00:02:41,900 --> 00:02:45,200
就是我们的下面这个concel的这个方法

62
00:02:45,533 --> 00:02:47,499
我们这里看到的一个一个的东西

63
00:02:47,500 --> 00:02:48,166
叫什么呢

64
00:02:48,166 --> 00:02:51,733
叫做救生所向Lifeline box

65
00:02:51,733 --> 00:02:52,533
就这个东西

66
00:02:53,133 --> 00:02:54,499
那每一个Lifeline box

67
00:02:54,500 --> 00:02:57,533
其实对应的是我们的代码

68
00:02:57,533 --> 00:02:58,699
中间的对象

69
00:02:59,000 --> 00:03:00,133
注意不是类

70
00:03:00,200 --> 00:03:02,200
因为类是静态结构

71
00:03:02,766 --> 00:03:04,066
代码跑起来

72
00:03:04,166 --> 00:03:05,999
除了静态方法以外

73
00:03:06,066 --> 00:03:10,133
所有的类都需要实力化成对象

74
00:03:10,700 --> 00:03:14,133
所以在动态建模的沟通图里头啊

75
00:03:14,133 --> 00:03:15,766
包括交互图里头

76
00:03:15,766 --> 00:03:17,266
包括后面的通信图

77
00:03:17,266 --> 00:03:21,166
我们所描述的最基本的东西是对象

78
00:03:21,300 --> 00:03:23,166
而这些对象就是我们这里可以看到

79
00:03:23,166 --> 00:03:24,566
用这些nine FLAN box

80
00:03:24,600 --> 00:03:26,800
救生锁箱去描述的

81
00:03:26,933 --> 00:03:28,299
下面那个线是什么呢

82
00:03:28,300 --> 00:03:29,600
那就叫救生锁

83
00:03:29,700 --> 00:03:32,066
就是救生锁箱吊在上面哗

84
00:03:32,100 --> 00:03:33,166
丢条线下来

85
00:03:33,533 --> 00:03:37,133
那线表示说这些对象之间的交互

86
00:03:37,400 --> 00:03:40,533
从上往下看它的顺序啊

87
00:03:40,533 --> 00:03:41,466
当然也做了编号

88
00:03:41,466 --> 00:03:42,733
所以比较好理解

89
00:03:42,966 --> 00:03:44,899
所以这张图描述的是什么

90
00:03:44,900 --> 00:03:47,533
就是我们的某一个Groupon

91
00:03:47,533 --> 00:03:49,799
active service的对象

92
00:03:49,800 --> 00:03:53,533
就这个对象的concept的方法

93
00:03:53,533 --> 00:03:54,933
它的逻辑是什么

94
00:03:55,100 --> 00:03:56,266
它的逻辑是

95
00:03:56,266 --> 00:04:00,399
我在里头会去调一个activity到对象的

96
00:04:00,600 --> 00:04:01,866
find the BYD的方法

97
00:04:01,866 --> 00:04:02,933
就是这第二行

98
00:04:04,166 --> 00:04:05,566
这一行是写在这的

99
00:04:06,266 --> 00:04:07,333
这一行是对应的

100
00:04:07,333 --> 00:04:08,966
这个方法就是它的入口

101
00:04:09,100 --> 00:04:09,733
是表示说

102
00:04:09,733 --> 00:04:11,699
是描述这个方法的动态逻辑的

103
00:04:11,866 --> 00:04:16,566
这一行是在这一个activity到的find吧ID

104
00:04:16,566 --> 00:04:19,399
的方法调完了以后返回的是activity

105
00:04:19,600 --> 00:04:22,533
然后我会调返回的这个activity的

106
00:04:23,266 --> 00:04:24,266
concel的方法

107
00:04:24,266 --> 00:04:25,099
就是这个

108
00:04:26,266 --> 00:04:28,799
然后第三行没画图上

109
00:04:29,400 --> 00:04:31,400
我们只画了两行在图上

110
00:04:31,600 --> 00:04:33,466
为什么只画两行在图上

111
00:04:34,700 --> 00:04:37,866
因为这两行是逻辑的最重要的部分

112
00:04:38,200 --> 00:04:40,066
就是他其实描述了说

113
00:04:40,066 --> 00:04:43,199
我取消一个团购活动是干了什么

114
00:04:43,300 --> 00:04:44,066
就干两件事情

115
00:04:44,066 --> 00:04:45,466
第一找到这个团购在不在

116
00:04:45,500 --> 00:04:46,200
我能不能操作

117
00:04:46,200 --> 00:04:48,066
他能在

118
00:04:48,066 --> 00:04:48,866
我能操作它

119
00:04:48,866 --> 00:04:50,399
我就把它取消

120
00:04:50,800 --> 00:04:52,133
那第三句话

121
00:04:52,366 --> 00:04:53,533
这一句话就没写

122
00:04:53,533 --> 00:04:55,133
的代码没画到图上

123
00:04:55,266 --> 00:04:56,699
这其实在说一个问题

124
00:04:56,700 --> 00:05:01,533
我们不需要把每一行代码画到图上

125
00:05:01,766 --> 00:05:02,599
没有必要

126
00:05:03,266 --> 00:05:04,566
我们想要要知道

127
00:05:04,566 --> 00:05:07,133
当我们去做这个画这张图时候

128
00:05:07,366 --> 00:05:09,399
他所要表达的含义

129
00:05:09,566 --> 00:05:12,066
就是我们这段代码里头

130
00:05:12,066 --> 00:05:13,866
到底是怎样完成这个事情的

131
00:05:13,866 --> 00:05:16,366
而不需要把里头的每一行代码的细节

132
00:05:16,533 --> 00:05:17,666
都不能描述出来啊

133
00:05:17,666 --> 00:05:20,399
所以大家能看到这样的一个很好懂吧

134
00:05:20,400 --> 00:05:21,200
是吧

135
00:05:21,533 --> 00:05:24,599
每一个的这个救生手枪

136
00:05:24,866 --> 00:05:27,733
lifeline box这个中文念起来很拗口啊

137
00:05:27,733 --> 00:05:30,266
因为lifeline box代表的是一个对象

138
00:05:31,500 --> 00:05:31,900
掉下来的

139
00:05:31,900 --> 00:05:32,700
那个lifeline

140
00:05:32,700 --> 00:05:33,700
那个救生所

141
00:05:34,133 --> 00:05:37,333
上面描述的是这些对象之间的交互啊

142
00:05:37,333 --> 00:05:38,866
所以有编号啊

143
00:05:38,866 --> 00:05:40,566
而且也是从上往下的

144
00:05:40,566 --> 00:05:41,466
这个顺序

145
00:05:41,500 --> 00:05:43,000
大家应该一眼能看出来

146
00:05:43,600 --> 00:05:46,700
这是我们称之为顺序图啊

147
00:05:46,700 --> 00:05:47,733
secret stagram

148
00:05:48,366 --> 00:05:49,266
同样的逻辑

149
00:05:49,266 --> 00:05:50,533
就同样这行代码

150
00:05:50,733 --> 00:05:53,166
我们其实还有另外一种图可以去描述

151
00:05:53,166 --> 00:05:55,899
这种图叫做communication diagram

152
00:05:55,900 --> 00:05:57,100
我们叫做通讯图

153
00:05:57,100 --> 00:05:59,733
或者叫做啊沟通图啊

154
00:05:59,733 --> 00:06:01,466
就是那communication翻过来的

155
00:06:01,500 --> 00:06:04,733
那这种图和sex diagram就是顺序图

156
00:06:04,733 --> 00:06:07,999
最大的差别在于说他是网络图

157
00:06:08,000 --> 00:06:11,366
结构所以他并没有像顺序图那样

158
00:06:11,666 --> 00:06:13,566
必须从上往下

159
00:06:13,566 --> 00:06:15,666
从左往右这么扩展

160
00:06:15,666 --> 00:06:17,799
就是如果说你有很多对象的话

161
00:06:17,933 --> 00:06:20,266
顺序图会不断地从左往右

162
00:06:20,266 --> 00:06:21,299
增加新的对象

163
00:06:21,300 --> 00:06:23,066
如果这个交互很复杂

164
00:06:23,133 --> 00:06:24,266
有很多对象的话

165
00:06:24,466 --> 00:06:26,466
就会从左往右不断的交互对象

166
00:06:26,533 --> 00:06:28,966
如果这些对象有多次的交互

167
00:06:28,966 --> 00:06:31,066
那就会从上往下这样

168
00:06:31,066 --> 00:06:32,933
所以他的顺序是从左往右

169
00:06:32,933 --> 00:06:34,066
从上往下

170
00:06:34,600 --> 00:06:37,900
而卡米克星代管通讯图是没有的

171
00:06:37,933 --> 00:06:40,333
通讯图就是用同样的

172
00:06:40,333 --> 00:06:42,133
用这个一个框表示

173
00:06:42,133 --> 00:06:43,999
说一个对象这个是一样

174
00:06:44,600 --> 00:06:48,300
那这个对象的交互

175
00:06:48,666 --> 00:06:52,133
是用那个箭头和编号写出来的

176
00:06:52,366 --> 00:06:54,266
所以这一张沟通

177
00:06:54,366 --> 00:06:57,199
这一张通讯图上描述的事情

178
00:06:57,900 --> 00:07:00,000
跟前面的这个是完全一样的啊

179
00:07:00,000 --> 00:07:01,166
哦把代码拷过来吧

180
00:07:01,166 --> 00:07:03,299
放在这可能大家有点看不太懂

181
00:07:05,400 --> 00:07:06,733
代码拷两次

182
00:07:07,766 --> 00:07:08,899
这样比较好看

183
00:07:35,866 --> 00:07:37,366
这样大家比较好看啊

184
00:07:38,066 --> 00:07:39,366
就是同样的代码

185
00:07:39,400 --> 00:07:42,500
但是用沟通communication单管画的话

186
00:07:42,500 --> 00:07:43,333
就这个样子

187
00:07:44,266 --> 00:07:46,066
1代表它的编号

188
00:07:46,133 --> 00:07:47,566
所以你看这里的很多编号

189
00:07:47,566 --> 00:07:48,499
从一开始

190
00:07:48,700 --> 00:07:50,733
一是我们描述的

191
00:07:50,733 --> 00:07:53,933
是一个group act service的concel的方法

192
00:07:53,933 --> 00:07:55,133
传达三个参数进来

193
00:07:55,133 --> 00:07:57,799
修补ID ID user描述的是这一行

194
00:07:58,933 --> 00:07:59,733
要说是这行

195
00:07:59,866 --> 00:08:01,166
这是我们的入口啊

196
00:08:01,166 --> 00:08:01,699
通常来说

197
00:08:01,700 --> 00:08:03,200
你可以看到那个是入口

198
00:08:03,200 --> 00:08:04,466
我们通常那个object的

199
00:08:04,466 --> 00:08:05,966
就是用来做个标志的

200
00:08:06,133 --> 00:08:08,466
只能图从object你可以看起他

201
00:08:08,466 --> 00:08:09,566
他不像那个顺序图

202
00:08:09,566 --> 00:08:10,766
顺序图从左往右看

203
00:08:10,766 --> 00:08:12,566
你就知道最那边那个就是入口

204
00:08:12,600 --> 00:08:14,666
你这样去找这这一堆

205
00:08:14,666 --> 00:08:17,899
去找找那个编号和找那个opject的标志

206
00:08:18,300 --> 00:08:20,600
那第二行是什么呢

207
00:08:20,700 --> 00:08:21,766
第二行是这个

208
00:08:23,166 --> 00:08:24,166
看它的编号

209
00:08:24,500 --> 00:08:25,300
从看它的

210
00:08:25,300 --> 00:08:30,166
箭头啊从group act service指向的activity到

211
00:08:30,166 --> 00:08:35,199
说明说group act service里头的代码去掉了

212
00:08:35,500 --> 00:08:38,966
activity到的find吧ID的方法就是这个

213
00:08:40,466 --> 00:08:41,933
然后第三行是什么呢

214
00:08:41,966 --> 00:08:44,733
第三行就这个调完了以后啊

215
00:08:44,733 --> 00:08:46,366
这个说明他又回到了

216
00:08:46,700 --> 00:08:50,000
因为都在这个group act service的方法里头

217
00:08:50,000 --> 00:08:50,200
所以

218
00:08:50,200 --> 00:08:52,800
他又回到了group act service的方法里头

219
00:08:52,933 --> 00:08:53,966
再去调什么呢

220
00:08:53,966 --> 00:08:57,699
再去调activity的concel的方法啊

221
00:08:57,700 --> 00:08:59,733
所以这是comication代管

222
00:09:00,500 --> 00:09:01,766
同样的代码

223
00:09:01,866 --> 00:09:04,666
为什么要用两张图去描述

224
00:09:05,400 --> 00:09:07,533
这是大家所好奇的地方啊

225
00:09:08,000 --> 00:09:09,366
我们再给大家看一张

226
00:09:09,700 --> 00:09:13,800
这个也是我们在课程设计中间的代码

227
00:09:14,400 --> 00:09:17,466
同样是这个group act设备室的

228
00:09:17,466 --> 00:09:20,866
这是创建一个团购活动啊

229
00:09:20,866 --> 00:09:21,666
大家可以看到

230
00:09:21,666 --> 00:09:24,533
创建一个团购活动的逻辑

231
00:09:25,200 --> 00:09:27,700
相对复杂一点啊

232
00:09:28,066 --> 00:09:30,566
他里头的这个过程是

233
00:09:30,766 --> 00:09:36,999
第一他会去找到这个商品

234
00:09:37,000 --> 00:09:39,900
因为团购是针对某个商品来加的团购

235
00:09:40,000 --> 00:09:41,866
所以第一要看这个商品在不在

236
00:09:41,933 --> 00:09:43,733
所以那个翻的lowscell吧ID

237
00:09:43,733 --> 00:09:45,599
其实是返回一个不带sale的

238
00:09:45,600 --> 00:09:47,933
孤立的product的对象

239
00:09:48,166 --> 00:09:50,899
如果这个product对象是啊

240
00:09:50,900 --> 00:09:53,266
如果这个product的对象是在的

241
00:09:54,766 --> 00:09:57,099
对如果这个Pro dot的对象是在的

242
00:09:57,200 --> 00:09:58,600
那就没有问题

243
00:09:58,600 --> 00:09:59,600
如果他不在的话

244
00:09:59,600 --> 00:10:01,466
你就后面就不要去给他加团购了

245
00:10:01,466 --> 00:10:01,866
或者说

246
00:10:01,866 --> 00:10:03,899
这个Pro dot对象不是你这个商铺的

247
00:10:04,000 --> 00:10:04,966
都不会去抓

248
00:10:04,966 --> 00:10:05,966
所以我们所有的

249
00:10:05,966 --> 00:10:07,799
记住这我们所有的什么find吧ID

250
00:10:07,800 --> 00:10:08,866
都会做两件事情

251
00:10:09,066 --> 00:10:10,199
第一件事情他在不在

252
00:10:10,200 --> 00:10:11,966
第二件事情他是不是你这个商铺的

253
00:10:12,100 --> 00:10:14,066
如果他不是你的商铺的

254
00:10:14,066 --> 00:10:16,099
你其实后面你就不能去做了

255
00:10:16,600 --> 00:10:20,400
所以我们这里头会加了一个虚线

256
00:10:20,400 --> 00:10:21,466
大家可以看到前面这张图上

257
00:10:21,466 --> 00:10:22,566
没看到这张

258
00:10:22,566 --> 00:10:23,399
虚线表示什么呢

259
00:10:23,400 --> 00:10:26,500
我们正常的方法的返回

260
00:10:27,200 --> 00:10:28,966
其实是有返回值的

261
00:10:28,966 --> 00:10:30,333
比如说我们在下面这里可以看到

262
00:10:30,333 --> 00:10:31,333
他有返回值

263
00:10:31,366 --> 00:10:32,066
看见没有

264
00:10:32,066 --> 00:10:33,199
调他的返回值

265
00:10:33,200 --> 00:10:34,300
调他的返回值

266
00:10:34,700 --> 00:10:34,966
但是

267
00:10:34,966 --> 00:10:38,499
我们除了用等号的返回值去返回以外

268
00:10:38,533 --> 00:10:41,099
我们其实还可以用虚线去表示

269
00:10:41,766 --> 00:10:43,366
那同样的道理

270
00:10:43,366 --> 00:10:44,499
既然可以用虚线

271
00:10:44,500 --> 00:10:45,400
可以用等号

272
00:10:46,400 --> 00:10:48,300
那我们就要把虚线和等号

273
00:10:48,500 --> 00:10:50,300
分担成不同的用途

274
00:10:50,566 --> 00:10:51,899
一般来说

275
00:10:52,100 --> 00:10:54,666
正常返回我们都会用等号去写

276
00:10:54,666 --> 00:10:56,399
这个很很直观是吧

277
00:10:56,566 --> 00:10:57,699
比如说install Excel

278
00:10:57,700 --> 00:11:00,933
返回一个我更新的新的Excel对象啊

279
00:11:00,933 --> 00:11:03,966
install act和更新一个新的act对象

280
00:11:03,966 --> 00:11:05,133
只用等号去写

281
00:11:05,500 --> 00:11:07,133
当我们知道所有的方法

282
00:11:07,133 --> 00:11:08,566
除了正常返回以外

283
00:11:08,566 --> 00:11:10,366
还有另外一种返回方式是什么呢

284
00:11:11,200 --> 00:11:12,566
就是exception

285
00:11:12,800 --> 00:11:15,266
就是在Java中间写任何一个方法

286
00:11:15,266 --> 00:11:17,333
你都知道除了它正常返回以外

287
00:11:18,000 --> 00:11:19,466
中间可以抛exception

288
00:11:19,733 --> 00:11:20,699
也是返回

289
00:11:20,933 --> 00:11:24,099
所以我们在整个的这个UML的图中间

290
00:11:24,133 --> 00:11:25,699
在Java里头

291
00:11:25,700 --> 00:11:29,600
我们通常不成文的的习惯就是

292
00:11:29,600 --> 00:11:30,600
正常返回

293
00:11:30,600 --> 00:11:33,566
用等号虚线表示

294
00:11:34,166 --> 00:11:35,966
会抛出exception啊

295
00:11:35,966 --> 00:11:37,499
所以我们在这里可以看到

296
00:11:37,500 --> 00:11:39,566
我在这里用虚线表示了

297
00:11:39,566 --> 00:11:41,766
说翻的no cell 8 ID的

298
00:11:41,766 --> 00:11:42,333
这个方法

299
00:11:42,333 --> 00:11:46,566
有可能抛出两个business exception啊

300
00:11:46,566 --> 00:11:50,533
分别是resource ID not exist和resource outscope

301
00:11:50,533 --> 00:11:52,366
一个表示那个ID对象不存在

302
00:11:52,366 --> 00:11:55,199
一个表示那个产品ID不是你的

303
00:11:55,200 --> 00:11:55,866
商铺里的

304
00:11:55,866 --> 00:11:57,366
你不能去操作它

305
00:11:57,366 --> 00:11:59,866
都会抛出这两个business exception

306
00:11:59,866 --> 00:12:02,299
抛出来所以这是虚线啊

307
00:12:02,866 --> 00:12:04,266
那这个逻辑大家可以看到

308
00:12:04,266 --> 00:12:05,533
它表述的就是

309
00:12:05,700 --> 00:12:09,000
我们在创建一个团购活动里头

310
00:12:09,000 --> 00:12:11,000
首先找到这个商品在不在

311
00:12:11,200 --> 00:12:12,800
如果这个商品在的话

312
00:12:12,800 --> 00:12:14,666
那我们就为这个商品

313
00:12:14,666 --> 00:12:16,199
创建一个新的销售

314
00:12:16,333 --> 00:12:19,533
所以调Excel到的insert

315
00:12:19,533 --> 00:12:21,199
去创建一个新的销售

316
00:12:21,700 --> 00:12:25,800
因为团购是必须要能够卖的

317
00:12:25,800 --> 00:12:28,266
所以我们会创建一个团购类的销售啊

318
00:12:28,266 --> 00:12:31,299
INSO的一个on sale进去

319
00:12:31,466 --> 00:12:33,299
然后再创建了一个活动

320
00:12:33,733 --> 00:12:34,466
叫activity

321
00:12:34,466 --> 00:12:36,133
到去创建了一个活动

322
00:12:36,400 --> 00:12:39,466
第三个事情是把团购和这个活动

323
00:12:39,733 --> 00:12:41,999
就是销售和这个活动关联起来

324
00:12:42,200 --> 00:12:43,900
所以连续做了三个

325
00:12:43,900 --> 00:12:47,200
因此创建一个销售团购的销售

326
00:12:47,200 --> 00:12:48,666
使得这个商品可以卖了

327
00:12:49,200 --> 00:12:52,500
第二个创建了一个这个团购的活动

328
00:12:52,766 --> 00:12:56,199
然后把活动和销售关联起来啊

329
00:12:56,200 --> 00:12:58,766
所以12456就是干这个事情的

330
00:12:58,800 --> 00:12:59,166
对应的

331
00:12:59,166 --> 00:13:01,766
也就是我们这里看到的这个代码啊

332
00:13:01,766 --> 00:13:04,466
456那我们这里有一行代码没写进去

333
00:13:04,466 --> 00:13:06,966
就是这个on sale的set type

334
00:13:07,266 --> 00:13:09,066
必须把这个销售的类型

335
00:13:09,066 --> 00:13:10,366
设成是团购的类型

336
00:13:10,366 --> 00:13:13,066
然后才把它新增到销售里去

337
00:13:13,133 --> 00:13:14,333
这行代码没有写的

338
00:13:14,900 --> 00:13:15,666
这行代码没有写

339
00:13:15,666 --> 00:13:16,466
在顺序图里

340
00:13:16,466 --> 00:13:17,466
这就同样是说

341
00:13:17,466 --> 00:13:18,066
我们顺序图

342
00:13:18,066 --> 00:13:21,299
并不是需要把每一行代码写进去的

343
00:13:21,466 --> 00:13:24,499
目前画的这个就已经能够表述出来

344
00:13:24,500 --> 00:13:27,866
说我们的group啊

345
00:13:27,866 --> 00:13:28,899
act service里头

346
00:13:28,900 --> 00:13:31,933
是如何完成一个团购的创建

347
00:13:32,400 --> 00:13:33,766
找到商品有没有

348
00:13:33,933 --> 00:13:35,299
如果商品有的话

349
00:13:35,300 --> 00:13:37,000
就创建一个对应的销售

350
00:13:37,000 --> 00:13:38,600
创建一个对应的团购活动

351
00:13:38,600 --> 00:13:39,866
把两者关联起来

352
00:13:39,866 --> 00:13:40,599
就是这么件

353
00:13:40,600 --> 00:13:41,666
就是这么件事情

354
00:13:42,733 --> 00:13:44,399
我们用沟通图画一下大

355
00:13:44,400 --> 00:13:47,133
家一看这张沟通图就有点头晕了是吧

356
00:13:48,333 --> 00:13:49,933
顺序图还比较好理解

357
00:13:50,466 --> 00:13:52,366
当你来看这张沟通图的时候

358
00:13:52,533 --> 00:13:53,933
我们还是把代码拷过来啊

359
00:13:53,933 --> 00:13:56,366
因为其实看这张沟通图看着挺别扭的

360
00:14:15,300 --> 00:14:17,066
我们还是把代码拷到一平上啊

361
00:14:17,066 --> 00:14:18,866
这样看起来就比较直观一点

362
00:14:19,400 --> 00:14:21,133
所以从那个option开始

363
00:14:21,133 --> 00:14:23,166
那个是首的第一步

364
00:14:23,166 --> 00:14:26,366
所以第一步它描述的是group on act

365
00:14:26,366 --> 00:14:29,466
service的creategroup act的方法

366
00:14:29,666 --> 00:14:30,866
所以看了一个一啊

367
00:14:30,866 --> 00:14:31,999
所以描述的是这个

368
00:14:32,100 --> 00:14:33,400
这他要描述的是什么

369
00:14:33,400 --> 00:14:35,866
就是每张图他要描述的都是一个方法

370
00:14:36,166 --> 00:14:37,999
所以入口的那个地方

371
00:14:38,000 --> 00:14:38,600
就描述的是

372
00:14:38,600 --> 00:14:40,766
这张图描述的是哪一个方法

373
00:14:41,333 --> 00:14:43,999
第二是这里头的第一行代码

374
00:14:44,266 --> 00:14:47,366
在Protocol中间找到这个东西在不在

375
00:14:48,066 --> 00:14:50,199
如果找到了就是第三

376
00:14:50,933 --> 00:14:52,366
创建一个新的Excel

377
00:14:52,366 --> 00:14:53,566
给它塞进去

378
00:14:54,000 --> 00:14:55,166
然后是第四

379
00:14:55,166 --> 00:14:56,666
创建一个act等

380
00:14:57,400 --> 00:14:58,533
再把它塞进去

381
00:14:58,733 --> 00:15:00,266
它这个问题在于说

382
00:15:00,566 --> 00:15:03,599
第4和第5都是调的同样一个对象

383
00:15:03,600 --> 00:15:06,266
activity到的这个对象在活动图

384
00:15:06,266 --> 00:15:07,333
在Ctrl king

385
00:15:07,333 --> 00:15:08,166
待会儿你没办法

386
00:15:08,166 --> 00:15:10,933
他只好在4上面再画一个5

387
00:15:11,200 --> 00:15:13,866
表示在4走完4以后再走5

388
00:15:13,866 --> 00:15:15,799
然后调activity到的

389
00:15:16,933 --> 00:15:17,733
啊

390
00:15:20,666 --> 00:15:23,266
对调activity到的另外一个方法

391
00:15:23,333 --> 00:15:24,533
这个我还写错了啊

392
00:15:24,533 --> 00:15:25,599
方法明写错了

393
00:15:25,733 --> 00:15:26,533
调另外一个方法

394
00:15:26,533 --> 00:15:28,533
用sex activity Excel的方法

395
00:15:28,700 --> 00:15:29,933
去把它塞进去啊

396
00:15:29,933 --> 00:15:30,999
去把它塞进去

397
00:15:31,333 --> 00:15:33,766
这是我们的沟通图

398
00:15:34,400 --> 00:15:36,366
所以看完以后大家应该有一个疑问

399
00:15:36,366 --> 00:15:38,766
就是为什么同样的代码

400
00:15:39,066 --> 00:15:41,999
要用两种图去描述啊

401
00:15:42,000 --> 00:15:43,566
其实原因非常简单啊

402
00:15:43,566 --> 00:15:45,299
大家从直观上来看

403
00:15:45,300 --> 00:15:48,566
应该会觉得顺序图更加的清楚啊

404
00:15:48,566 --> 00:15:52,066
沟通图看起来更加的困难啊

405
00:15:52,066 --> 00:15:54,466
但是沟通图的好处在于什么呢

406
00:15:54,466 --> 00:15:55,499
就是审版面

407
00:15:56,466 --> 00:15:57,333
就是省版面

408
00:15:57,333 --> 00:15:58,666
没有别的原因

409
00:15:58,900 --> 00:16:02,100
所以当你在一张纸上头画不下的时候

410
00:16:02,966 --> 00:16:05,733
你就会选择用沟通图去画

411
00:16:05,900 --> 00:16:07,800
用这个通信图去画啊

412
00:16:07,800 --> 00:16:09,166
communication达过尔人去画

413
00:16:09,466 --> 00:16:11,266
如果说你能够画得下的话

414
00:16:11,333 --> 00:16:13,099
那就会用顺序图去画

415
00:16:13,366 --> 00:16:14,266
就是这个目的

416
00:16:14,366 --> 00:16:15,299
那今天的话

417
00:16:15,300 --> 00:16:17,133
我们其实在行业内

418
00:16:17,133 --> 00:16:18,766
已经极少看到

419
00:16:18,766 --> 00:16:22,733
有人用communication diagram来画这个东西了

420
00:16:22,733 --> 00:16:25,533
因为这个东西确实是非常不好读

421
00:16:25,866 --> 00:16:27,699
所以我们今天

422
00:16:29,000 --> 00:16:31,166
更多的看到的是前面的顺序图

423
00:16:31,533 --> 00:16:32,866
那从今年开始

424
00:16:32,866 --> 00:16:34,066
我们就把整个

425
00:16:34,066 --> 00:16:35,699
这个communication diagram的内容

426
00:16:35,700 --> 00:16:37,200
从地图去掉

427
00:16:37,466 --> 00:16:39,499
因为往年我们也不会用它去讲

428
00:16:39,500 --> 00:16:40,966
很多例子啊

429
00:16:40,966 --> 00:16:42,599
今年就干脆就把怎么去画

430
00:16:42,600 --> 00:16:44,300
这个communication digram给它去掉了

431
00:16:44,300 --> 00:16:47,100
所以大家有一个认识知道

432
00:16:47,100 --> 00:16:49,366
说在做动态建模的时候

433
00:16:49,366 --> 00:16:50,699
是有两种图的

434
00:16:51,000 --> 00:16:52,733
一个是super diagram

435
00:16:52,733 --> 00:16:54,266
一个是comication diagram

436
00:16:54,400 --> 00:16:56,566
然后comication diagram长啥样啊

437
00:16:57,366 --> 00:16:58,699
我们知道这是coming down

438
00:16:58,766 --> 00:16:59,533
然后呢

439
00:16:59,533 --> 00:17:01,899
你知道今天已经很少有人用这个画了

440
00:17:01,966 --> 00:17:02,199
所以

441
00:17:02,200 --> 00:17:06,100
我们主要的内容就讲顺序图怎么画

442
00:17:06,166 --> 00:17:07,699
就是secret代管怎么画

443
00:17:08,066 --> 00:17:10,166
我们来逐一的来细讲一下

444
00:17:10,166 --> 00:17:11,866
这个secret代管的符号啊

445
00:17:11,866 --> 00:17:14,166
其实刚才我们已经多多少少提到过了

446
00:17:14,466 --> 00:17:15,766
我们所看到的这个

447
00:17:15,766 --> 00:17:17,899
上面这个符号叫做lifeline box

448
00:17:18,200 --> 00:17:20,133
叫做救生所向

449
00:17:20,466 --> 00:17:21,733
很形象为啥

450
00:17:21,733 --> 00:17:23,333
因为它下面垂下来一条线

451
00:17:23,333 --> 00:17:25,133
叫做Lifeline

452
00:17:25,400 --> 00:17:26,533
叫做救生锁

453
00:17:26,533 --> 00:17:28,733
你觉得是一个箱子啊

454
00:17:28,900 --> 00:17:30,566
一个链条刷下来

455
00:17:30,800 --> 00:17:32,533
那这个箱子表示什么

456
00:17:32,666 --> 00:17:33,899
救生锁箱表示什么

457
00:17:33,900 --> 00:17:35,466
这个Lifeline box表示的是

458
00:17:35,466 --> 00:17:37,999
我们在设计中间的对象

459
00:17:38,866 --> 00:17:40,866
注意我一直强调是对象

460
00:17:40,900 --> 00:17:41,500
不是累

461
00:17:41,500 --> 00:17:44,000
因为他描述的是代码跑起来的状况

462
00:17:44,200 --> 00:17:46,400
所以他描述的是在代码中间

463
00:17:46,400 --> 00:17:48,200
实力画出来的对象

464
00:17:48,733 --> 00:17:49,966
而这个lifeline呢

465
00:17:49,966 --> 00:17:52,699
则表示说从这个对象出发

466
00:17:52,800 --> 00:17:55,533
他跟其他对象的交互

467
00:17:55,766 --> 00:17:57,699
所以用lifeline把它弄下来

468
00:17:57,700 --> 00:17:58,766
救生锁弄下来

469
00:17:58,900 --> 00:18:01,466
表示这个对象跟其他对象的交互

470
00:18:02,500 --> 00:18:03,500
怎么交互法

471
00:18:03,500 --> 00:18:05,266
我们靠的是这个线

472
00:18:06,200 --> 00:18:06,933
这个线呢

473
00:18:06,933 --> 00:18:08,699
其实在箭头上啊

474
00:18:08,700 --> 00:18:11,966
我们现在看到是一个实心箭头

475
00:18:13,300 --> 00:18:14,500
就是这样的箭头

476
00:18:18,166 --> 00:18:19,933
这表示同步消息

477
00:18:20,333 --> 00:18:20,933
什么叫同步消息

478
00:18:20,933 --> 00:18:23,799
就是我的调用是有返回值的

479
00:18:23,933 --> 00:18:27,933
所以我们可以看到bo等于find we get b o

480
00:18:28,300 --> 00:18:29,466
参数传过去

481
00:18:29,466 --> 00:18:32,799
那这个做完了以后就会有返回词汇了

482
00:18:33,066 --> 00:18:34,499
什么叫做做完了啊

483
00:18:34,500 --> 00:18:35,666
就是我们所说的

484
00:18:37,933 --> 00:18:38,799
这个框

485
00:18:39,566 --> 00:18:41,999
这个框叫做execution specification

486
00:18:42,066 --> 00:18:43,966
叫做执行的说明

487
00:18:43,966 --> 00:18:45,766
有人把它翻成执行的规范啊

488
00:18:45,766 --> 00:18:48,599
所以它原文叫做execution specification

489
00:18:49,166 --> 00:18:50,766
就这个这个框

490
00:18:51,766 --> 00:18:52,599
这个框表示什么

491
00:18:52,600 --> 00:18:54,133
这表示这个整个的

492
00:18:54,133 --> 00:18:56,266
这个方法的处理的过程

493
00:18:56,600 --> 00:18:58,700
这个方法从此开始

494
00:18:59,333 --> 00:19:00,499
到这结束

495
00:19:01,200 --> 00:19:04,200
所以这个bo等于fan的wastedbo

496
00:19:04,200 --> 00:19:06,866
是在这个点上头返回回去的

497
00:19:07,200 --> 00:19:09,400
因为我们现在画的是一个什么呢

498
00:19:09,700 --> 00:19:12,100
画的是一个实心的箭头

499
00:19:12,266 --> 00:19:14,733
我们其实还有另外一种箭头是

500
00:19:16,300 --> 00:19:17,200
这样的箭头

501
00:19:17,333 --> 00:19:17,999
这表示什么

502
00:19:18,000 --> 00:19:19,300
这表示异步的方法

503
00:19:19,300 --> 00:19:19,933
大家应该知道

504
00:19:19,933 --> 00:19:22,933
异步的消息发出去以后

505
00:19:22,933 --> 00:19:25,799
是不会立马有返回值的

506
00:19:26,133 --> 00:19:29,599
需要靠回调才会知道它的返回值

507
00:19:29,933 --> 00:19:31,399
那在我们的设计中间

508
00:19:31,400 --> 00:19:32,400
我们大量的

509
00:19:32,400 --> 00:19:35,766
就是前面在seven Stack这个系列里头

510
00:19:35,766 --> 00:19:37,333
全部都是同步的

511
00:19:38,300 --> 00:19:39,866
但是在regulative Stack里

512
00:19:39,866 --> 00:19:42,333
面全部都是异步的啊

513
00:19:42,333 --> 00:19:43,566
因为我们主要的设计

514
00:19:43,566 --> 00:19:46,099
都是在service Stack的这一条线来做

515
00:19:46,133 --> 00:19:48,333
所以我们所有的这些箭头

516
00:19:48,333 --> 00:19:49,766
就都是同步箭头

517
00:19:50,200 --> 00:19:52,400
在设计中间其实没有看到异步箭头

518
00:19:52,500 --> 00:19:55,733
那今年我们打算把某一些模块

519
00:19:55,933 --> 00:19:57,599
做成异步的模块

520
00:19:57,900 --> 00:20:00,000
比如说我非常想把订单模块啊

521
00:20:00,000 --> 00:20:01,066
做成异步模块

522
00:20:01,066 --> 00:20:02,366
这样对于做订单的组

523
00:20:02,366 --> 00:20:03,533
是一个很大的挑战

524
00:20:03,533 --> 00:20:05,733
因为你们一个模块要做成同步的

525
00:20:05,966 --> 00:20:07,466
一个模块做成异步的

526
00:20:07,466 --> 00:20:09,699
但是我只是建议啊

527
00:20:09,700 --> 00:20:10,900
所以我并不强迫

528
00:20:11,366 --> 00:20:13,299
订单模块全部做成异步模块

529
00:20:13,300 --> 00:20:14,666
但是我会做一些例子

530
00:20:14,933 --> 00:20:16,066
为什么订单模块

531
00:20:16,066 --> 00:20:19,699
比较适合做成这个异步的模块

532
00:20:19,700 --> 00:20:22,166
那那时候所有的线就变成这样

533
00:20:22,466 --> 00:20:24,699
因为它其实是没有返回值的

534
00:20:24,900 --> 00:20:27,000
它的返回值都必须靠同步

535
00:20:27,300 --> 00:20:30,100
都可以都靠回调来完成啊

536
00:20:30,133 --> 00:20:30,966
那我们现在看到的

537
00:20:30,966 --> 00:20:32,499
都是service dark这一边

538
00:20:32,666 --> 00:20:34,466
所以全是同步的啊

539
00:20:34,466 --> 00:20:36,299
这个excuse specification

540
00:20:36,300 --> 00:20:39,333
表示这个方法的开始和方法的结尾

541
00:20:39,333 --> 00:20:40,533
这个整个这个

542
00:20:40,533 --> 00:20:42,366
把整个这个条状的东西

543
00:20:42,366 --> 00:20:43,866
都是表示整个方法

544
00:20:44,466 --> 00:20:47,999
这是我们所说的这个message

545
00:20:48,000 --> 00:20:49,100
那下面大家可以看到

546
00:20:49,100 --> 00:20:51,466
这个虚线其实叫做reply message

547
00:20:51,866 --> 00:20:55,766
我们知道同步的是有返回值的啊

548
00:20:55,766 --> 00:20:56,666
异步的话

549
00:20:56,666 --> 00:20:59,399
那它的回调就必须靠reply message了

550
00:20:59,566 --> 00:21:00,966
但是对于同步的来说

551
00:21:00,966 --> 00:21:02,166
它是有返回值的

552
00:21:02,300 --> 00:21:04,766
所以同步的这个reply message

553
00:21:04,766 --> 00:21:06,799
我们就用于exception

554
00:21:07,300 --> 00:21:08,166
大家注意看啊

555
00:21:08,166 --> 00:21:09,399
你可以看到他这个符号

556
00:21:09,400 --> 00:21:11,400
其实就是已经表现出来是异步的

557
00:21:11,666 --> 00:21:14,933
只是说我们在同步的这个里头啊

558
00:21:14,933 --> 00:21:18,666
因为想要表示一个方法

559
00:21:18,666 --> 00:21:20,999
既有正常返回也有exception

560
00:21:21,000 --> 00:21:21,700
所以我们

561
00:21:21,700 --> 00:21:25,800
借用了异步符号的reply message去表示

562
00:21:25,800 --> 00:21:28,300
说这个方法是会抛出exception的

563
00:21:28,366 --> 00:21:30,133
就是起这样的一个作用啊

564
00:21:30,133 --> 00:21:31,199
起这样的一个作用

565
00:21:31,533 --> 00:21:35,399
这个是呃我们的基本的符号

566
00:21:36,266 --> 00:21:37,866
那除了这些基本符号以外

567
00:21:37,866 --> 00:21:38,966
我们这里还能看到一个

568
00:21:38,966 --> 00:21:40,899
叫做combine fragment

569
00:21:41,566 --> 00:21:42,933
叫做组合框

570
00:21:42,933 --> 00:21:44,366
或者叫组合片段

571
00:21:44,733 --> 00:21:45,699
这个用来表示什么呢

572
00:21:45,700 --> 00:21:46,400
用来表示

573
00:21:46,400 --> 00:21:49,800
我们在代码中间的一些基本的结构

574
00:21:49,800 --> 00:21:50,866
就是基本的broke

575
00:21:50,866 --> 00:21:51,699
比如说if

576
00:21:51,700 --> 00:21:54,100
s if啊

577
00:21:54,100 --> 00:21:56,866
复循环well循环等等

578
00:21:56,866 --> 00:21:58,199
这些基本的broke

579
00:21:58,200 --> 00:22:00,066
我们可以用这个combine

580
00:22:00,700 --> 00:22:02,933
combine fragment去表示啊

581
00:22:02,933 --> 00:22:04,399
组合片段去表示

582
00:22:04,500 --> 00:22:05,533
就这么多符号

583
00:22:06,266 --> 00:22:08,866
基本上我们的代码里头所写的内容

584
00:22:08,866 --> 00:22:11,666
都可以通过这些符号去把它表示出来

585
00:22:12,733 --> 00:22:14,599
我们首先说一下这个lifeline box

586
00:22:14,600 --> 00:22:15,933
就是救生属相

587
00:22:15,933 --> 00:22:17,699
它是用于描述对象

588
00:22:18,200 --> 00:22:20,566
我们在这个对象里头

589
00:22:20,566 --> 00:22:22,166
大家可以看到中间有个冒号

590
00:22:22,466 --> 00:22:25,699
冒号后面表示这个对象的类型

591
00:22:25,866 --> 00:22:29,699
冒号前面表示对象的变量名

592
00:22:30,700 --> 00:22:32,400
我们知道任何对象是有变量名的

593
00:22:32,400 --> 00:22:33,766
但是有些时候

594
00:22:33,766 --> 00:22:37,266
我们会出现冒号前面没有名字的对象

595
00:22:37,466 --> 00:22:39,966
这表示匿名的product door对象

596
00:22:39,966 --> 00:22:41,466
为什么会出现匿名的啊

597
00:22:41,466 --> 00:22:43,266
我们在前面这例中就能看到

598
00:22:43,366 --> 00:22:46,166
比如说第一个object不算啊

599
00:22:46,500 --> 00:22:47,733
这个就是例名的

600
00:22:48,266 --> 00:22:50,333
为啥因为我们描述的入口

601
00:22:50,333 --> 00:22:54,499
就是想描述prototel的fund wasted b o的方法

602
00:22:55,000 --> 00:22:56,266
就像描述这个东西

603
00:22:56,366 --> 00:22:58,733
所以第一个对象是没有名字的

604
00:22:58,733 --> 00:22:59,899
因为他是我的入口

605
00:22:59,900 --> 00:23:02,000
我并不知道这个对象的变量名是什么

606
00:23:02,000 --> 00:23:03,866
我不知道他在被别人怎么调

607
00:23:04,000 --> 00:23:05,333
因为我不知道他被别人怎么调

608
00:23:05,333 --> 00:23:05,533
所以我

609
00:23:05,533 --> 00:23:07,699
并不知道他在别人那叫什么变量

610
00:23:07,700 --> 00:23:10,466
我只能从我的描述这个地方开始

611
00:23:10,566 --> 00:23:14,733
所以第一个对象通常是匿名的对象

612
00:23:14,733 --> 00:23:15,299
比如这一节

613
00:23:15,300 --> 00:23:18,533
表示的是一个匿名的product doll的对象

614
00:23:19,200 --> 00:23:20,500
除了第一个对象以外

615
00:23:20,533 --> 00:23:23,766
大部分的对象都是有名字的

616
00:23:24,366 --> 00:23:26,333
我们在这些图里头都能看到

617
00:23:26,333 --> 00:23:27,766
这些对象都是有名字的

618
00:23:27,766 --> 00:23:30,966
我们举一张完整的图给大家看啊

619
00:23:30,966 --> 00:23:31,766
前面

620
00:23:39,366 --> 00:23:40,933
好就还是拿这样看吧

621
00:23:41,300 --> 00:23:41,566
比如说

622
00:23:41,566 --> 00:23:43,933
我们看到的第二个对象和第三个对象

623
00:23:46,133 --> 00:23:48,133
在冒号前面是有名称的

624
00:23:48,133 --> 00:23:49,966
在冒号前面是有名称的

625
00:23:50,100 --> 00:23:51,666
这个名称叫他的变量名

626
00:23:51,933 --> 00:23:53,599
这时候变量名你就会想说

627
00:23:53,600 --> 00:23:54,766
我写什么名字

628
00:23:55,366 --> 00:23:58,266
这个变量名必须跟我们的静态模型

629
00:23:58,266 --> 00:24:00,699
跟内图对应起来

630
00:24:00,933 --> 00:24:01,199
比如说

631
00:24:01,200 --> 00:24:03,766
我们这里所看到的这个对象名

632
00:24:03,766 --> 00:24:06,166
叫做product Po Mapper

633
00:24:06,733 --> 00:24:09,466
在这里头再没看到有product pio Mapper了

634
00:24:09,466 --> 00:24:10,266
这个名字

635
00:24:10,300 --> 00:24:11,933
所以这个名字应该到哪去找呢

636
00:24:11,966 --> 00:24:13,166
到类图上去找

637
00:24:13,333 --> 00:24:14,366
你在类图上

638
00:24:14,366 --> 00:24:15,299
你会发现

639
00:24:15,366 --> 00:24:21,133
product pio Mapper是PRODUCTAL的一个关联关系

640
00:24:21,133 --> 00:24:23,166
就是PRODUCTAL和product map

641
00:24:23,166 --> 00:24:24,366
我把它画出来吧

642
00:24:24,533 --> 00:24:25,733
在类图它长这样

643
00:25:00,866 --> 00:25:02,066
它类图上长这个样

644
00:25:02,933 --> 00:25:04,199
类图的一个片段啊

645
00:25:04,533 --> 00:25:07,666
所以这个product p o Mapper这个名字

646
00:25:07,666 --> 00:25:09,933
是来自于类图里头的这个real name

647
00:25:10,500 --> 00:25:11,400
这表示什么呢

648
00:25:11,566 --> 00:25:12,266
大家应该还记得

649
00:25:12,266 --> 00:25:12,699
内存中间

650
00:25:12,700 --> 00:25:13,900
这个real name表示说

651
00:25:13,900 --> 00:25:16,066
在protector中间有一个属性

652
00:25:16,266 --> 00:25:19,299
它的类型是propo Mapper

653
00:25:19,800 --> 00:25:21,200
productpo Mapper

654
00:25:21,200 --> 00:25:24,100
它的名字是productpo Mapper

655
00:25:24,100 --> 00:25:24,933
小写的p

656
00:25:25,500 --> 00:25:27,000
所以这个名字是来自列的

657
00:25:27,066 --> 00:25:29,733
静态模型和对态动态模型

658
00:25:29,733 --> 00:25:30,666
对应着看

659
00:25:31,100 --> 00:25:33,300
第二个factory冒号

660
00:25:33,300 --> 00:25:36,100
product factory是从哪来的呢

661
00:25:39,200 --> 00:25:39,900
是从哪来的

662
00:25:39,900 --> 00:25:40,766
能看出来吗

663
00:25:40,966 --> 00:25:42,199
这个名字在上面有

664
00:25:42,533 --> 00:25:43,599
来自于这个地方

665
00:25:46,800 --> 00:25:47,866
来注意这个地方

666
00:25:48,066 --> 00:25:51,333
也就是它的入参里头的第三个参数

667
00:25:51,533 --> 00:25:56,333
是一个product factory的对象啊

668
00:25:56,333 --> 00:25:58,966
所以后面的除了第一个

669
00:25:59,100 --> 00:26:00,100
第一个对象

670
00:26:00,100 --> 00:26:01,500
因为我是我描述的对象

671
00:26:01,500 --> 00:26:01,966
我并不知道

672
00:26:01,966 --> 00:26:03,699
他在别的方法中间怎么调的

673
00:26:03,800 --> 00:26:05,133
所以我不知道他的名字

674
00:26:05,133 --> 00:26:07,999
我们称之为匿名的对象

675
00:26:08,500 --> 00:26:09,800
后面的对象

676
00:26:09,900 --> 00:26:13,800
每一个对象在Lifeline box中面

677
00:26:13,800 --> 00:26:16,800
都要明确的写明他的名字

678
00:26:17,000 --> 00:26:19,566
他的名字可能来自于我们的类图

679
00:26:19,900 --> 00:26:21,900
可能来自于我们的入餐

680
00:26:22,166 --> 00:26:24,966
也有可能来自于我们在里头的返回值

681
00:26:25,200 --> 00:26:26,133
局域变量

682
00:26:26,366 --> 00:26:27,399
都有可能啊

683
00:26:27,400 --> 00:26:28,200
都有可能

684
00:26:28,200 --> 00:26:31,500
所以每一个Lifeline box都是要有名字的

685
00:26:33,466 --> 00:26:34,699
这个是大多数

686
00:26:35,500 --> 00:26:36,700
那还有一些啊

687
00:26:36,700 --> 00:26:38,500
比如说大家会调静态方法

688
00:26:38,666 --> 00:26:41,299
静态方法这么写就是经常化

689
00:26:41,300 --> 00:26:42,366
可以是不需要名字的

690
00:26:42,366 --> 00:26:44,199
因为你不需要实例化

691
00:26:44,300 --> 00:26:45,800
你可以用方法明

692
00:26:45,800 --> 00:26:48,066
去调用这个方法里头的

693
00:26:48,066 --> 00:26:49,699
这个内容里的所有方法

694
00:26:49,866 --> 00:26:51,899
所以我们前面加了一个stereotype啊

695
00:26:51,900 --> 00:26:53,133
通常这个stereotype叫什么

696
00:26:53,133 --> 00:26:55,466
mental class也有可能标成别的

697
00:26:55,466 --> 00:26:56,933
有的人标成static啊

698
00:26:56,966 --> 00:26:59,066
这个反正也不用说生成代码

699
00:26:59,266 --> 00:27:00,866
所以你自己怎么定义都可以

700
00:27:01,066 --> 00:27:04,399
来表示说这一个是一个静态类

701
00:27:04,400 --> 00:27:06,100
而不是一个对象

702
00:27:06,200 --> 00:27:07,466
为什么用stereotype

703
00:27:07,466 --> 00:27:08,399
因为我们说了

704
00:27:08,933 --> 00:27:11,299
在Lifeline BOOKS里的表述都是对象

705
00:27:11,533 --> 00:27:12,766
现在它不是对象了

706
00:27:12,866 --> 00:27:13,699
它是个类

707
00:27:13,966 --> 00:27:15,399
所以我们需要用steretype

708
00:27:15,400 --> 00:27:18,266
去改变它原有的描述方式

709
00:27:18,733 --> 00:27:20,299
还有一些很特殊的

710
00:27:20,333 --> 00:27:21,999
比如说我们的一个集合对象

711
00:27:22,700 --> 00:27:25,666
这个集合对象的名字叫做act list

712
00:27:26,666 --> 00:27:29,966
然后它里头的每一个元素叫做activity

713
00:27:30,400 --> 00:27:33,200
那这样的一个表述是表述说

714
00:27:33,200 --> 00:27:38,366
在一个集合里头的第i个元素

715
00:27:38,533 --> 00:27:41,199
或者每一个元素也可以这么表示

716
00:27:41,333 --> 00:27:43,066
所以当你看到这样的一个表述的时候

717
00:27:43,066 --> 00:27:43,766
你应该知道

718
00:27:43,766 --> 00:27:46,366
act act list是一个集合对象

719
00:27:46,733 --> 00:27:50,299
然后它里头的每一个元素是activity啊

720
00:27:50,300 --> 00:27:52,466
其实是这样的一个类型

721
00:27:59,500 --> 00:28:00,666
就是这样的一个类型

722
00:28:01,100 --> 00:28:04,200
或者说是一个array也可以

723
00:28:04,366 --> 00:28:06,899
就是一个数组也可以

724
00:28:10,000 --> 00:28:12,966
因为我们这里其实并没有显示的说明

725
00:28:12,966 --> 00:28:14,466
说它是一个什么类型

726
00:28:14,466 --> 00:28:15,733
所以它或者是一个array

727
00:28:15,733 --> 00:28:18,099
或者说是一个集合对象啊

728
00:28:18,100 --> 00:28:19,100
都是可以表示说

729
00:28:19,100 --> 00:28:22,333
它里头的每一个元素是activity啊

730
00:28:22,733 --> 00:28:25,166
这个就是这样的含义啊

731
00:28:25,333 --> 00:28:26,399
主要是四种

732
00:28:26,400 --> 00:28:27,700
主要是四种含义

733
00:28:28,600 --> 00:28:29,533
那消息的话

734
00:28:29,533 --> 00:28:30,066
大家可以看到

735
00:28:30,066 --> 00:28:32,133
他沿用了在内

736
00:28:32,133 --> 00:28:34,366
图上面的消息的表述方式

737
00:28:34,700 --> 00:28:35,800
格式一模一样的

738
00:28:36,000 --> 00:28:38,366
但是实际上我们在画的过程中间

739
00:28:38,366 --> 00:28:39,533
大家可以看到

740
00:28:40,500 --> 00:28:44,500
我们其实并没有完整的用这个格式

741
00:28:44,500 --> 00:28:46,166
把它全部写出来

742
00:28:46,500 --> 00:28:50,400
很多时候我们都会省略内心

743
00:28:51,166 --> 00:28:52,166
因为没有意义

744
00:28:52,166 --> 00:28:53,599
类型的意义不太大

745
00:28:54,166 --> 00:28:55,333
我们更多的关注

746
00:28:55,333 --> 00:28:59,566
于是这个match的名字就是方法名

747
00:29:00,133 --> 00:29:02,199
参数的变量名

748
00:29:03,133 --> 00:29:07,666
以及他的返回的变量名叫什么

749
00:29:07,733 --> 00:29:10,166
我们对于类型来说通常都会忽略了

750
00:29:10,166 --> 00:29:11,466
所以我在这里所有的图上呢

751
00:29:11,466 --> 00:29:13,899
都没有去写他的类型啊

752
00:29:13,900 --> 00:29:15,166
这是他的message

753
00:29:17,266 --> 00:29:18,666
这个给大家看一下

754
00:29:19,966 --> 00:29:21,566
我们这张图啊

755
00:29:21,566 --> 00:29:23,399
都把对应的代码放着

756
00:29:23,400 --> 00:29:26,066
这是Pro大道中间的find a body的BYD

757
00:29:26,200 --> 00:29:27,700
这样的一个方法

758
00:29:28,066 --> 00:29:29,333
在这个方法中间啊

759
00:29:29,333 --> 00:29:30,333
大家可以对

760
00:29:30,333 --> 00:29:33,599
照着说我们看前面所讲的Lifeline book

761
00:29:33,600 --> 00:29:35,300
上头的每一个对象

762
00:29:35,300 --> 00:29:38,300
都是需要有名字的

763
00:29:38,300 --> 00:29:39,366
除了第一个以外

764
00:29:39,566 --> 00:29:40,799
第一个是我们的描述的

765
00:29:40,800 --> 00:29:42,500
所以Pro dog dog不需要

766
00:29:42,733 --> 00:29:44,133
那我们看到第二个对象

767
00:29:44,133 --> 00:29:45,166
这个factory

768
00:29:45,300 --> 00:29:47,400
这个factory是怎么来的呢

769
00:29:49,000 --> 00:29:50,700
这个factory

770
00:29:50,866 --> 00:29:54,666
是我们在第二个里头看到返回值

771
00:29:55,400 --> 00:29:56,600
而这个返回值

772
00:29:56,600 --> 00:29:58,933
你会看到一个很有趣的地方

773
00:29:58,933 --> 00:30:03,999
就是它用的这个消息的名字叫做Crede

774
00:30:04,666 --> 00:30:06,966
记得我们在前面讲类图的时候说到

775
00:30:06,966 --> 00:30:08,133
当一个类里头

776
00:30:08,133 --> 00:30:09,566
有一个方法名叫做Crede的时候

777
00:30:09,566 --> 00:30:10,333
表示是它的

778
00:30:10,333 --> 00:30:11,133
什么

779
00:30:11,500 --> 00:30:14,200
是它的构造函数啊

780
00:30:14,200 --> 00:30:16,466
是它的构造函数

781
00:30:16,866 --> 00:30:18,499
那对于说

782
00:30:20,333 --> 00:30:21,333
那对于说

783
00:30:21,333 --> 00:30:23,999
我们的这一个图中间

784
00:30:24,466 --> 00:30:26,399
所在顺序图中间

785
00:30:26,400 --> 00:30:27,866
同样继承

786
00:30:27,866 --> 00:30:30,199
我们在跟内图中间的定义是一样的

787
00:30:30,466 --> 00:30:30,999
所以说

788
00:30:31,000 --> 00:30:33,100
当我们的factory等于一个create什么

789
00:30:33,100 --> 00:30:34,133
什么东西的时候

790
00:30:34,333 --> 00:30:40,099
说明factory是一个构造函数

791
00:30:40,100 --> 00:30:41,466
溜出来的结果

792
00:30:41,533 --> 00:30:42,766
所以对应代码来看

793
00:30:42,766 --> 00:30:44,499
就是第二句是什么呢

794
00:30:44,500 --> 00:30:45,300
是这一行

795
00:30:47,900 --> 00:30:48,700
是这一行

796
00:30:50,933 --> 00:30:51,766
这一行代码

797
00:30:52,066 --> 00:30:53,266
这是一行6的代码

798
00:30:53,266 --> 00:30:57,266
但是在上面它写的是create的这个方式

799
00:30:58,300 --> 00:31:01,066
然后下面大家所看到的

800
00:31:01,066 --> 00:31:03,966
是一个option的combine fragment

801
00:31:04,166 --> 00:31:07,166
option的combine fragment表示if

802
00:31:07,533 --> 00:31:09,266
所以大家可以看到这有个if

803
00:31:11,533 --> 00:31:12,499
这是表示他的red

804
00:31:12,500 --> 00:31:13,766
中间如果有缓存

805
00:31:14,100 --> 00:31:14,966
如果有缓存

806
00:31:14,966 --> 00:31:16,133
他就会到Redis里头

807
00:31:16,133 --> 00:31:19,299
直接把这个对象给他拿回来

808
00:31:19,500 --> 00:31:22,766
然后去掉factory的set bill

809
00:31:23,266 --> 00:31:24,599
然后把它返回回去

810
00:31:24,800 --> 00:31:26,400
如果没有缓存的话呢

811
00:31:26,400 --> 00:31:28,700
那他就会去调什么呢

812
00:31:28,700 --> 00:31:30,266
find the ways get bill

813
00:31:30,333 --> 00:31:31,866
去调另外一个方法

814
00:31:31,866 --> 00:31:32,499
而这个方法

815
00:31:32,500 --> 00:31:35,466
大家注意看是这个类似的

816
00:31:35,966 --> 00:31:37,399
所以我们在那张图上呢

817
00:31:37,400 --> 00:31:39,866
我可以看到第六啊

818
00:31:39,866 --> 00:31:41,733
它是一个什么

819
00:31:41,733 --> 00:31:45,699
是一个在我们的find Wallet

820
00:31:46,466 --> 00:31:49,099
把ID这个方法没有结束的情况下

821
00:31:49,100 --> 00:31:53,966
头去调本身这个对象的另外一个方法

822
00:31:54,066 --> 00:31:54,966
所以大家可以看到

823
00:31:54,966 --> 00:31:58,399
他的execution specification给叠在一起了

824
00:31:58,400 --> 00:32:00,333
这个就很形象地知道说

825
00:32:00,566 --> 00:32:02,133
外面的那个方法并没有结束

826
00:32:02,133 --> 00:32:03,766
他被压入到对战里头

827
00:32:03,766 --> 00:32:04,933
然后我去调

828
00:32:05,733 --> 00:32:08,066
自己这个对象的另外一个方法

829
00:32:08,066 --> 00:32:09,766
这个方法结束完了以后

830
00:32:09,766 --> 00:32:13,866
他会退回到外面这个方法的的域里头

831
00:32:13,866 --> 00:32:15,299
然后最后再结束

832
00:32:15,500 --> 00:32:17,133
所以一定要

833
00:32:19,166 --> 00:32:20,099
不要忘记这个概念

834
00:32:20,100 --> 00:32:21,133
就这个BU

835
00:32:21,566 --> 00:32:25,366
这个execution specification表示的什么含义

836
00:32:25,366 --> 00:32:27,666
表示的一个方法的执行的过程

837
00:32:28,800 --> 00:32:30,133
这是这个方法的头

838
00:32:30,133 --> 00:32:31,333
这是方法的结尾

839
00:32:31,400 --> 00:32:34,066
所以我们的Van varid BYD

840
00:32:34,066 --> 00:32:36,799
这个方法从这开始到这结束

841
00:32:37,300 --> 00:32:39,100
这个方法呢是从这开始

842
00:32:39,200 --> 00:32:40,300
就是在这个地方

843
00:32:41,100 --> 00:32:43,733
他执行完了以后才会再回到这个方法

844
00:32:43,733 --> 00:32:45,299
最后才会返回值

845
00:32:45,500 --> 00:32:46,766
所以他执行完了以后

846
00:32:46,766 --> 00:32:48,166
才会执行这个地方

847
00:32:48,366 --> 00:32:50,366
这个注意他这些画法

848
00:32:50,666 --> 00:32:51,966
然后这里头大家可以看到

849
00:32:51,966 --> 00:32:53,866
代码中间有两个writer

850
00:32:54,800 --> 00:32:56,700
这就比较讨厌了是吧

851
00:32:56,900 --> 00:32:58,866
我们在衣服里头有一个return

852
00:32:58,933 --> 00:33:00,799
然后第六行就是第六个

853
00:33:00,800 --> 00:33:02,300
最后一行又是个return

854
00:33:02,600 --> 00:33:04,533
那我们怎样表述说

855
00:33:04,533 --> 00:33:05,866
在一个方法中间

856
00:33:06,100 --> 00:33:08,300
会return不同的东西出来

857
00:33:08,466 --> 00:33:10,133
大家可以看到我们用的是什么呢

858
00:33:10,133 --> 00:33:11,566
用的是reply message

859
00:33:12,133 --> 00:33:14,599
这个就是我们如果想要代码的逻辑

860
00:33:14,600 --> 00:33:15,800
中间表示说

861
00:33:15,800 --> 00:33:18,333
在中间的部分是会被退回来的

862
00:33:18,600 --> 00:33:21,400
那就只能使用这个replaymessage啊

863
00:33:21,400 --> 00:33:22,333
去表述了

864
00:33:22,366 --> 00:33:23,699
所以这是另外一个

865
00:33:23,866 --> 00:33:24,733
给大家看一下

866
00:33:24,733 --> 00:33:27,466
这个replaymessage的表述的地址

867
00:33:28,466 --> 00:33:30,499
啊其中这个是自我调用啊

868
00:33:30,500 --> 00:33:32,666
这上面那个r是构造函数

869
00:33:32,666 --> 00:33:34,399
然后这个是一个if l

870
00:33:34,400 --> 00:33:38,733
if的这个叫做option combine fragment

871
00:33:40,566 --> 00:33:42,333
关于combine combine fragment

872
00:33:42,333 --> 00:33:43,533
就是组合片段的话

873
00:33:43,533 --> 00:33:45,699
除了我们看到的art和option以外

874
00:33:45,700 --> 00:33:47,000
其实它还有循环

875
00:33:47,366 --> 00:33:48,399
这是我们很常用的

876
00:33:48,400 --> 00:33:49,900
就中间这个路谱循环

877
00:33:50,066 --> 00:33:51,766
那另外两个其实不太用

878
00:33:52,000 --> 00:33:54,166
就是我们的关键区和PA

879
00:33:54,266 --> 00:33:55,966
至少在我们的跟踪镜中间不太用

880
00:33:56,166 --> 00:33:58,499
因为我们的这个病型

881
00:33:58,500 --> 00:34:00,100
是由框架本身负责的

882
00:34:00,100 --> 00:34:01,066
所以我们在代码中间

883
00:34:01,066 --> 00:34:03,566
通常不会去写关键区

884
00:34:03,800 --> 00:34:04,333
超系统讲了

885
00:34:04,333 --> 00:34:06,466
关键区没有讲到

886
00:34:06,466 --> 00:34:07,266
没有超系统

887
00:34:08,566 --> 00:34:09,166
还没讲是吧

888
00:34:09,166 --> 00:34:12,133
没讲这个县城进程的互斥和关键区

889
00:34:12,133 --> 00:34:14,399
是吧那怎么讲你就知道了啊

890
00:34:14,400 --> 00:34:15,400
我先先用这个名字

891
00:34:15,400 --> 00:34:18,133
就是如果说代码中间是有关键区的话

892
00:34:18,700 --> 00:34:20,800
我们在整个课程设计中间

893
00:34:20,800 --> 00:34:23,100
只有一处是有关键区的

894
00:34:23,333 --> 00:34:24,899
所以什么时候

895
00:34:24,900 --> 00:34:27,166
操作系统讲完了这个互次

896
00:34:27,300 --> 00:34:28,733
信号量和关键区以后

897
00:34:28,733 --> 00:34:29,733
我们大家看一下

898
00:34:29,733 --> 00:34:31,899
那一段有关键区的代码

899
00:34:31,900 --> 00:34:34,166
你就需要用reaching去表示出来

900
00:34:36,600 --> 00:34:38,566
再看更多的这个组合片段啊

901
00:34:38,566 --> 00:34:40,199
这个是一个art

902
00:34:40,666 --> 00:34:42,166
art是一个if l

903
00:34:42,600 --> 00:34:43,666
所以这是if

904
00:34:44,866 --> 00:34:46,099
这是L s

905
00:34:46,100 --> 00:34:47,466
l就会抛出一个错

906
00:34:47,800 --> 00:34:48,166
看到没有

907
00:34:48,166 --> 00:34:49,666
表示l抛出个错

908
00:34:49,700 --> 00:34:52,266
if嘛都会去get b o啊

909
00:34:52,733 --> 00:34:53,766
这是我们的find the ways

910
00:34:53,766 --> 00:34:56,399
get b o的这个方法内部的逻辑

911
00:34:56,666 --> 00:34:59,899
所以这个是上面写的那个叫做god

912
00:35:00,000 --> 00:35:01,400
叫做衣服的条件

913
00:35:01,500 --> 00:35:03,666
衣服和l其实就是

914
00:35:03,666 --> 00:35:04,466
衣服和l

915
00:35:06,066 --> 00:35:06,866
多态

916
00:35:08,000 --> 00:35:10,300
我们在面对设计中一定是有多态的

917
00:35:10,366 --> 00:35:11,966
多态怎么去做

918
00:35:12,133 --> 00:35:13,266
我们在这个设计中间

919
00:35:13,266 --> 00:35:15,566
大家可以看到它存在着一个多态

920
00:35:15,900 --> 00:35:17,933
上面那张顺序图单元已经看懂了

921
00:35:17,933 --> 00:35:20,333
描述的是product的一个方法

922
00:35:20,800 --> 00:35:22,366
这个product呢

923
00:35:23,366 --> 00:35:24,599
把类图画一下

924
00:35:31,333 --> 00:35:33,566
这里大家应该能看到说

925
00:35:33,700 --> 00:35:36,566
顺序图和类图必须要搭配着看了

926
00:35:36,900 --> 00:35:38,966
他本来就是变形建模的过程

927
00:35:39,333 --> 00:35:40,566
他的类图长这样

928
00:35:45,900 --> 00:35:47,066
或者画了一个局部啊

929
00:35:47,066 --> 00:35:49,399
画了跟这个代码有关的这个部分

930
00:36:12,366 --> 00:36:14,799
然后这个下面是

931
00:36:14,966 --> 00:36:16,933
下面这半就是在这了啊

932
00:36:16,933 --> 00:36:18,466
下面这半就是在这了

933
00:36:19,200 --> 00:36:24,000
呃然后这张图的这个product的

934
00:36:24,000 --> 00:36:25,700
get varied on cell的方法

935
00:36:25,866 --> 00:36:27,999
然后下面是一个up形框

936
00:36:28,066 --> 00:36:30,466
up形框表示说是if是吧

937
00:36:30,600 --> 00:36:31,333
所以if

938
00:36:31,333 --> 00:36:35,999
它的这个valid on cell不等于等于空啊

939
00:36:36,000 --> 00:36:37,933
而且这是Excel的excuse

940
00:36:37,933 --> 00:36:38,666
不等于空

941
00:36:38,666 --> 00:36:39,499
就是它没有值

942
00:36:39,500 --> 00:36:41,066
然后这个excuse存在的话

943
00:36:41,266 --> 00:36:44,366
它则会去调这个Oncel excuse的

944
00:36:44,366 --> 00:36:45,133
excuse的方法

945
00:36:45,133 --> 00:36:46,799
返回值是一个Excel对象

946
00:36:47,200 --> 00:36:48,666
是这样的一个逻辑

947
00:36:48,700 --> 00:36:50,400
那现在的问题在于说

948
00:36:50,700 --> 00:36:52,766
oncel excuse是一个积累

949
00:36:53,666 --> 00:36:55,466
是一个抽象的类啊

950
00:36:55,466 --> 00:36:56,199
是一个接口啊

951
00:36:56,200 --> 00:36:56,800
不是抽象类

952
00:36:56,800 --> 00:36:57,933
是一个interface

953
00:36:58,200 --> 00:36:59,766
它底下有三个实线

954
00:37:00,600 --> 00:37:02,000
它底下有三个实线

955
00:37:02,200 --> 00:37:04,733
那三个实线的逻辑是不一样的

956
00:37:04,800 --> 00:37:05,933
所以on sale

957
00:37:07,866 --> 00:37:10,533
呃调这个outside excuse excuse的方法

958
00:37:10,533 --> 00:37:13,166
会因为说它三个指类的不同

959
00:37:13,400 --> 00:37:15,133
它逻辑是完全不一样

960
00:37:15,600 --> 00:37:17,900
那这样的一个多态的情况下

961
00:37:17,900 --> 00:37:18,800
头是我们在面向对

962
00:37:18,866 --> 00:37:20,933
面向对象设计中常见的一种情况

963
00:37:21,133 --> 00:37:23,999
我们如何用顺序图去描述其实他的

964
00:37:24,000 --> 00:37:27,733
做法就是简单粗暴的画三张

965
00:37:29,100 --> 00:37:29,766
就是这张图

966
00:37:29,766 --> 00:37:31,699
已经没办法用一张图去表述了

967
00:37:31,700 --> 00:37:34,133
所以因为它有一个多态的环境

968
00:37:34,333 --> 00:37:37,266
所以在多态这个地方就必须要切开

969
00:37:37,533 --> 00:37:39,366
把它单划三张

970
00:37:39,566 --> 00:37:42,266
这三张分别表示每一个不同类

971
00:37:42,266 --> 00:37:46,166
中间的excude是怎样去完成的啊

972
00:37:46,166 --> 00:37:47,266
就怎样去完成的

973
00:37:47,366 --> 00:37:49,899
这个就是多态的这个概念

974
00:37:50,466 --> 00:37:51,899
这是顺序图

975
00:37:51,933 --> 00:37:53,599
那最后再讲一下状态图

976
00:37:53,600 --> 00:37:55,933
我们先把今天把所有的图讲完啊

977
00:37:55,933 --> 00:37:58,766
然后下星期再讲设计

978
00:37:59,733 --> 00:38:03,499
我们除了对这个对象的模型

979
00:38:03,500 --> 00:38:04,966
进行建模以外

980
00:38:05,333 --> 00:38:07,699
对对象的行为进行建模以外

981
00:38:07,766 --> 00:38:10,333
其实我们还需要对对象的状态

982
00:38:10,333 --> 00:38:11,333
来进行建模

983
00:38:11,800 --> 00:38:13,366
为什么要对状态建模

984
00:38:13,366 --> 00:38:14,899
因为我们在系统中间

985
00:38:14,900 --> 00:38:17,300
所有定义的对象模型中的对象

986
00:38:17,533 --> 00:38:19,166
是可以分成两类的

987
00:38:19,366 --> 00:38:21,133
一类是有状态的对象

988
00:38:21,133 --> 00:38:22,799
一类是无状态的对象

989
00:38:23,766 --> 00:38:26,399
那什么叫做有状态对象

990
00:38:26,400 --> 00:38:28,266
有状态就是因为他有状态

991
00:38:28,266 --> 00:38:30,133
他有一个属性叫做状态

992
00:38:30,400 --> 00:38:31,533
这个状态不同

993
00:38:31,533 --> 00:38:34,066
这个对象的行为就是完全不一样

994
00:38:34,800 --> 00:38:36,200
而那些无状态对象呢

995
00:38:36,200 --> 00:38:38,366
其实他最底线就是他没有状态

996
00:38:38,366 --> 00:38:39,366
任何情况下头

997
00:38:39,366 --> 00:38:40,966
他的所有的行为都是一样的

998
00:38:40,966 --> 00:38:42,333
我们说的行为啊

999
00:38:42,333 --> 00:38:44,066
就是表示调他的方法时候

1000
00:38:44,066 --> 00:38:46,666
他的表现都是一样的啊

1001
00:38:46,666 --> 00:38:47,499
都是一样的

1002
00:38:47,666 --> 00:38:49,366
这个就是我们所说的

1003
00:38:49,366 --> 00:38:52,133
有状态的对象啊

1004
00:38:52,133 --> 00:38:54,199
在我们的设计中间

1005
00:38:54,200 --> 00:38:55,266
我们通um中间

1006
00:38:55,266 --> 00:38:57,399
我们通常会用状态基图

1007
00:38:57,900 --> 00:39:00,500
来描述这样的一个状态

1008
00:39:00,866 --> 00:39:02,566
状态基础的其实就是三个东西

1009
00:39:02,566 --> 00:39:03,966
最基本的是状态

1010
00:39:03,966 --> 00:39:05,999
就是我们说的state

1011
00:39:06,900 --> 00:39:08,900
然后呢是事件

1012
00:39:08,966 --> 00:39:11,733
因为我们这个状态会发生迁移

1013
00:39:12,166 --> 00:39:13,799
是因为事件而产生的

1014
00:39:13,800 --> 00:39:15,800
那因为一个事件发生

1015
00:39:16,166 --> 00:39:19,899
我们的对象会从a状态迁移到b状态

1016
00:39:20,066 --> 00:39:21,699
所以我们用一个转换

1017
00:39:22,266 --> 00:39:24,599
来表示状态和状态的迁移关系

1018
00:39:24,600 --> 00:39:26,566
我们用几张简单的图给大家看一下

1019
00:39:26,566 --> 00:39:27,533
状态图怎么画啊

1020
00:39:27,533 --> 00:39:29,133
因为状态图画起来会很复杂

1021
00:39:29,200 --> 00:39:30,533
在我们的整个课程设计中间

1022
00:39:30,533 --> 00:39:33,499
最复杂两个状态图是订单和售后

1023
00:39:33,566 --> 00:39:34,666
这两个是最复杂的

1024
00:39:34,666 --> 00:39:36,133
订单尤其复杂

1025
00:39:36,666 --> 00:39:38,399
那我们先不看那么复杂的状态图

1026
00:39:38,400 --> 00:39:39,900
我们先用最简单的来看

1027
00:39:40,133 --> 00:39:41,799
这是我们在产品模块中间的

1028
00:39:41,800 --> 00:39:43,333
两个有状态对象

1029
00:39:43,333 --> 00:39:45,166
产品的对象啊

1030
00:39:45,166 --> 00:39:46,499
我们前面其实给大家看了

1031
00:39:46,500 --> 00:39:48,066
这个这么多对象

1032
00:39:58,133 --> 00:39:59,299
这是产品的对象

1033
00:40:00,400 --> 00:40:01,133
这么多对象

1034
00:40:01,133 --> 00:40:05,366
你要去看说哪些对象是有状态的

1035
00:40:05,933 --> 00:40:07,966
我们这里头只有两个对象是有状态的

1036
00:40:07,966 --> 00:40:10,299
一个是产品那边那个产品

1037
00:40:10,533 --> 00:40:12,266
一个是活动

1038
00:40:12,533 --> 00:40:14,133
这两个对象是有状态的

1039
00:40:14,166 --> 00:40:15,699
那当然因为大家可以看到

1040
00:40:15,700 --> 00:40:18,066
团购活动和预售活动是继承于团

1041
00:40:18,133 --> 00:40:19,333
继承于活动的

1042
00:40:19,500 --> 00:40:20,966
所以活动有状态

1043
00:40:20,966 --> 00:40:24,199
团购活动和预售活动就都有状态啊

1044
00:40:24,200 --> 00:40:26,066
团购活动优惠活动就都有状态

1045
00:40:26,333 --> 00:40:28,333
然后产品那面是没有继承关系啊

1046
00:40:28,333 --> 00:40:30,466
所以就单纯是产品是有状态

1047
00:40:30,733 --> 00:40:32,866
这是我们在做需求分析中间发现的

1048
00:40:32,866 --> 00:40:34,866
说这是两个有状态的对象

1049
00:40:35,133 --> 00:40:36,466
那状态有什么

1050
00:40:36,600 --> 00:40:38,000
状态怎样去迁移

1051
00:40:38,133 --> 00:40:40,799
我们就需要用状态基图去描述

1052
00:40:42,066 --> 00:40:44,166
所以这里用这个状态基图

1053
00:40:46,166 --> 00:40:49,299
去描述说产品的状态

1054
00:40:50,533 --> 00:40:51,933
这描述了什么啊

1055
00:40:52,000 --> 00:40:53,800
我们注意下这里头的符号

1056
00:40:53,800 --> 00:40:57,566
这个实心的符号表示说是初始状态

1057
00:40:57,966 --> 00:41:01,333
也就是当我的产品刚一产生的时候

1058
00:41:01,600 --> 00:41:03,566
它的状态是一个什么样的状态

1059
00:41:03,700 --> 00:41:06,000
我们这里看到的这个初始状态表

1060
00:41:06,000 --> 00:41:09,100
示的是产品是下架状态

1061
00:41:09,166 --> 00:41:10,799
就是当我一个产品

1062
00:41:10,800 --> 00:41:15,166
被平台的管理员审核通过了以后

1063
00:41:15,366 --> 00:41:16,966
他就是在下架状态

1064
00:41:16,966 --> 00:41:18,499
而不是在上架状态

1065
00:41:18,900 --> 00:41:20,800
那还有一个状态就是上架状态

1066
00:41:21,400 --> 00:41:23,333
上架状态和下架状态之间

1067
00:41:23,333 --> 00:41:24,799
是可以迁移的

1068
00:41:25,200 --> 00:41:28,066
但这个迁移是用线来表示的

1069
00:41:28,066 --> 00:41:29,166
这个应该很明显

1070
00:41:29,600 --> 00:41:32,133
迁移上面会写说他的事件

1071
00:41:33,066 --> 00:41:34,166
还有它的条件

1072
00:41:34,266 --> 00:41:37,666
就是我们通常是因为一个外部事件

1073
00:41:37,966 --> 00:41:40,266
造成了说这个状态的迁移

1074
00:41:40,400 --> 00:41:42,000
但对于产品很特殊

1075
00:41:42,200 --> 00:41:44,300
我们这里所描述的这个状态的迁移

1076
00:41:44,300 --> 00:41:46,533
并不是一个外部事件来的

1077
00:41:46,766 --> 00:41:49,299
是因为我们的每一个产品的销售啊

1078
00:41:49,300 --> 00:41:52,100
每一个产品的它是有销售的

1079
00:41:52,400 --> 00:41:53,866
如果他在这个时间段

1080
00:41:53,866 --> 00:41:55,366
有一个销售有效了

1081
00:41:55,900 --> 00:41:58,200
这个产品体现出来就是他上架了

1082
00:41:58,600 --> 00:42:00,800
如果说他在这段时间里头

1083
00:42:00,800 --> 00:42:03,366
就当前这段时间是没有销售的

1084
00:42:03,800 --> 00:42:06,000
这个产品其实就是在整个系统中间

1085
00:42:06,000 --> 00:42:08,000
体现着是一种下架的状态

1086
00:42:08,333 --> 00:42:10,533
所以他这两个迁移的过程

1087
00:42:10,533 --> 00:42:11,199
大家可以看到

1088
00:42:11,200 --> 00:42:13,400
并不是由外部事件来造成的

1089
00:42:13,400 --> 00:42:15,066
而是由时间来造成的

1090
00:42:15,266 --> 00:42:17,199
如果说他的上架时间到了

1091
00:42:17,200 --> 00:42:19,066
他定义了一个上架的销售

1092
00:42:19,133 --> 00:42:19,999
他的时间到了

1093
00:42:20,000 --> 00:42:21,800
他就会从下架变成上架

1094
00:42:22,000 --> 00:42:25,000
如果说他的时间下架时间到了

1095
00:42:25,000 --> 00:42:27,500
他又会从上架变成下架

1096
00:42:27,566 --> 00:42:29,999
这个是由时间来控制的

1097
00:42:30,366 --> 00:42:31,266
那再有一个状态

1098
00:42:31,266 --> 00:42:32,766
就是下面这个禁售状态

1099
00:42:33,100 --> 00:42:36,266
不管他有没有到定义这个销售的时间

1100
00:42:36,800 --> 00:42:39,900
如果这个平台管理员

1101
00:42:39,900 --> 00:42:41,066
或者商铺管理员

1102
00:42:41,066 --> 00:42:42,766
觉得这个商品是不能卖

1103
00:42:43,266 --> 00:42:45,399
他就会简单的把这个商品

1104
00:42:45,400 --> 00:42:47,533
把它做成禁售的状态

1105
00:42:47,666 --> 00:42:49,499
所以禁售是一个动作

1106
00:42:49,566 --> 00:42:51,466
这个动作也会表现在在系统上

1107
00:42:51,466 --> 00:42:52,299
的一个API

1108
00:42:52,900 --> 00:42:54,900
这个API无论是由平台管理员

1109
00:42:54,900 --> 00:42:56,400
还是店铺管理员一做

1110
00:42:57,333 --> 00:42:59,366
这个商品不管是目前是下焦状态

1111
00:42:59,366 --> 00:43:00,133
还是上焦状态

1112
00:43:00,133 --> 00:43:01,866
通通都变成了禁售状态

1113
00:43:02,266 --> 00:43:05,066
这就是我们说的事件是禁止售

1114
00:43:05,466 --> 00:43:07,666
迁移是只要这个事件发生

1115
00:43:07,666 --> 00:43:10,533
就会从一和2迁移到凌览

1116
00:43:10,533 --> 00:43:11,999
这就是状态的迁移

1117
00:43:12,066 --> 00:43:14,999
我们为什么会说这有状态的差别

1118
00:43:15,000 --> 00:43:17,333
就为什么说产品这个东西是有状态的

1119
00:43:17,766 --> 00:43:20,466
下架状态的商品是不能买的

1120
00:43:20,900 --> 00:43:23,100
你只能看下

1121
00:43:23,600 --> 00:43:26,000
上架状态的产品你是可以买的

1122
00:43:26,000 --> 00:43:26,800
也可以看

1123
00:43:27,733 --> 00:43:31,666
禁售状态的商品你连看都不能看

1124
00:43:32,200 --> 00:43:35,000
就是对于顾客去搜商品的时候

1125
00:43:35,400 --> 00:43:36,566
他就是搜不到

1126
00:43:36,566 --> 00:43:39,499
任何在禁售范围内的商品

1127
00:43:39,933 --> 00:43:42,399
他只能搜到可以买的商品

1128
00:43:42,500 --> 00:43:44,933
就是上架的和下架的都能搜到

1129
00:43:45,133 --> 00:43:46,966
但是禁售的是搜不到的

1130
00:43:47,000 --> 00:43:50,366
就是我们说同样一个商品的对象

1131
00:43:50,900 --> 00:43:54,533
他在不同状态下他的行为是不一样

1132
00:43:54,766 --> 00:43:56,699
所以我们需要用进售

1133
00:43:57,000 --> 00:44:00,333
上架下架这三个状态去描述

1134
00:44:01,166 --> 00:44:02,999
如果对于禁售解禁的话

1135
00:44:03,000 --> 00:44:03,733
我们可以看到

1136
00:44:03,733 --> 00:44:06,733
这里就完整的描述了世界和条件

1137
00:44:07,366 --> 00:44:09,699
对于一个禁售状态的产品

1138
00:44:09,933 --> 00:44:12,799
如果他的世界是通过API

1139
00:44:13,133 --> 00:44:15,733
平台管理员或者说店铺管理员说

1140
00:44:15,733 --> 00:44:17,599
我解禁他完了可以卖

1141
00:44:18,000 --> 00:44:20,600
那这时候就要看它现在是上架时间

1142
00:44:20,600 --> 00:44:22,266
还是下架时间到了

1143
00:44:22,600 --> 00:44:25,200
如果说是在正常的上架范围之内

1144
00:44:25,200 --> 00:44:26,533
它就会变成上架状态

1145
00:44:26,700 --> 00:44:28,766
如果它其实已经过了那个上架时间

1146
00:44:28,766 --> 00:44:30,499
它就会变成了下架状态

1147
00:44:30,666 --> 00:44:33,299
所以这就是我们说的产品的状态图

1148
00:44:33,933 --> 00:44:34,899
活动量都比较简单

1149
00:44:34,900 --> 00:44:37,100
就是两个活动两个状态

1150
00:44:37,100 --> 00:44:37,900
一个是新建

1151
00:44:37,900 --> 00:44:38,600
一个是有效

1152
00:44:38,600 --> 00:44:40,366
因为所有的团购和

1153
00:44:40,366 --> 00:44:42,466
预售都需要审核的

1154
00:44:42,666 --> 00:44:45,499
也就是商铺的管理员

1155
00:44:45,500 --> 00:44:48,966
我新建了一个团购或者优惠的活动

1156
00:44:48,966 --> 00:44:51,299
这时候他的状态是新建态

1157
00:44:51,500 --> 00:44:53,400
就是我们标的初始状态

1158
00:44:53,766 --> 00:44:57,199
那如果平台管理员审核而且通过了

1159
00:44:57,533 --> 00:44:58,466
审核是动作

1160
00:44:58,466 --> 00:44:59,599
通过是条件

1161
00:44:59,800 --> 00:45:02,066
会使得这一个活动

1162
00:45:02,100 --> 00:45:03,766
团购或者优惠活动

1163
00:45:04,066 --> 00:45:08,099
从这个新建状态变成activity状态

1164
00:45:08,133 --> 00:45:09,099
变成这个状态

1165
00:45:09,133 --> 00:45:11,099
而activity状态是最终的状态

1166
00:45:11,300 --> 00:45:12,566
就是审核通过了以后

1167
00:45:12,566 --> 00:45:14,533
就是最终的这个状态

1168
00:45:14,533 --> 00:45:15,799
所以它有一个结束态

1169
00:45:16,266 --> 00:45:18,699
活动的状态代表了什么

1170
00:45:19,466 --> 00:45:22,133
如果说是一个新建状态的活动

1171
00:45:22,133 --> 00:45:26,199
其实是任何的任何的顾客买这个商品

1172
00:45:26,200 --> 00:45:28,000
都不会有这个活动起效的

1173
00:45:28,000 --> 00:45:28,900
虽然这个活动在

1174
00:45:29,100 --> 00:45:30,866
但是他是还没有通过审核状态

1175
00:45:30,866 --> 00:45:32,533
所以他不会起任何的作用

1176
00:45:32,766 --> 00:45:35,733
只有在有效状态的活动

1177
00:45:35,966 --> 00:45:38,333
才会在销售的时候起作用

1178
00:45:38,666 --> 00:45:40,566
所以这就是我们说对于活动

1179
00:45:40,566 --> 00:45:41,999
不同状态下

1180
00:45:42,200 --> 00:45:43,566
他的行为是不一样

1181
00:45:43,766 --> 00:45:45,133
好吧我们今天讲到这里

1182
00:45:49,700 --> 00:45:51,866
这两周大家都尽量来上课

1183
00:45:51,933 --> 00:45:54,699
因为这两周从其实从上周开始

1184
00:45:54,700 --> 00:45:57,566
教学督导就在随机的听课

1185
00:45:57,766 --> 00:45:58,599
听课嘛两个

1186
00:45:58,600 --> 00:46:00,600
一个是听老师讲课

1187
00:46:00,600 --> 00:46:02,200
一个是点学生的名

1188
00:46:02,333 --> 00:46:04,466
所以他如果点到你没来上课

1189
00:46:04,766 --> 00:46:07,366
那他就是直接寄到教务处去的啊

1190
00:46:07,366 --> 00:46:10,166
所以尽量这两三周大家尽量来上课

